set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    " The following are examples of different formats supported.
    " Keep Plugin commands between vundle#begin/end.
    " plugin on GitHub repo
    Plugin 'tpope/vim-fugitive'
    " plugin from http://vim-scripts.org/vim/scripts.html
    " Plugin 'L9'
    " Git plugin not hosted on GitHub
    Plugin 'git://git.wincent.com/command-t.git'
    " git repos on your local machine (i.e. when working on your own plugin)
    "Plugin 'file:///home/gmarik/path/to/plugin'
    " The sparkup vim script is in a subdirectory of this repo called vim.
    " Pass the path to set the runtimepath properly.
    Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
    " Install L9 and avoid a Naming conflict if you've already installed a
    " different version somewhere else.
    " Plugin 'ascenator/L9', {'name': 'newL9'}

    "快速註解
    Plugin 'preservim/nerdcommenter'

    "tab智慧補全
    Plugin 'ervandew/supertab'

    "彩虹括號
    Plugin 'luochen1990/rainbow'
        let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
        let g:rainbow_conf = {
        \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
        \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
        \   'operators': '_,_',
        \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
        \   'separately': {
        \   '*': {},
        \   'tex': {
        \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
        \   },
        \   'lisp': {
        \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
        \   },
        \   'vim': {
        \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
        \   },
        \   'html': {
        \   'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
        \   },
        \   'css': 0,
        \   }
        \}

    "ycm
    Plugin 'Valloric/YouCompleteMe'
        "往前跳和往後跳的快捷鍵為Ctrl+O以及Ctrl+I
        "let g:ycm_key_list_select_completion=['<c-n>']
        "let g:ycm_key_list_previous_completion=['<c-p>']
        set completeopt=menu  "關閉preview window
        let g:ycm_python_binary_path = '/Users/wang/miniforge3/bin/python3.9'
        let g:ycm_python_binary_path = '/Users/wang/miniforge3/envs/tensorflow/bin/python3.8'
        let g:ycm_python_binary_path = '/Users/wang/miniforge3/envs/pytorch/bin/python3.9'
        let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
        let g:ycm_confirm_extra_conf=0 "關閉載入.ycm_extra_conf.py提示
        let g:ycm_collect_identifiers_from_tags_files=1 " 開啟 YCM 基於標籤引擎
        let g:ycm_min_num_of_chars_for_completion=1 " 從第1個鍵入字元就開始羅列匹配項
        let g:ycm_cache_omnifunc=0 " 禁止快取匹配項,每次都重新生成匹配項
        let g:ycm_seed_identifiers_with_syntax=1 " 語法關鍵字補全
        let g:ycm_complete_in_comments = 1 "在註釋輸入中也能補全
        let g:ycm_complete_in_strings = 1 "在字串輸入中也能補全
        let g:ycm_collect_identifiers_from_comments_and_strings = 0 "註釋和字串中的文字也會被收入補全
        let g:ycm_echo_current_diagnostic = 1
        let g:ycm_max_num_identifier_candidates = 50
        let g:ycm_auto_trigger = 1
        let g:ycm_error_symbol = '>>'
        let g:ycm_warning_symbol = '>'
        let g:ycm_semantic_triggers =  {
                        \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
                        \ 'cs,lua,javascript': ['re!\w{2}'],
                        \ }
        "highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
        "highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black
        "let g:ycm_filetype_whitelist = { 
                        "\ c":1,
                        "\ cpp":1, 
                        "\ objc":1,
                        "\ py":1,
                        "\ sh":1,
                        "\ zsh":1,
                        "\ zimbu":1,
                        "\ }

    "NERDTree    
    Plugin 'scrooloose/nerdtree'
        nmap <F1> :NERDTreeToggle<CR>
        let g:NERDTreeWinSize = 25
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
        " Exit Vim if NERDTree is the only window left.
        autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |     
        \ quit | endif
        " Start NERDTree. If a file is specified, move the cursor to its window.
        "autocmd StdinReadPre * let s:std_in=1
        "autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif
        " 显示行号
        let NERDTreeShowLineNumbers=1
        let NERDTreeAutoCenter=1
        " 在终端启动vim时，共享NERDTree
        let g:nerdtree_tabs_open_on_console_startup=1
        " 显示书签列表
        "let NERDTreeShowBookmarks=1
        " Open the existing NERDTree on each new tab.
        autocmd BufWinEnter * silent NERDTreeMirror
        "设置树的显示图标
        let g:NERDTreeDirArrowExpandable = '-'
        let g:NERDTreeDirArrowCollapsible = '+'
        Plugin 'Xuyuanp/nerdtree-git-plugin'
        let g:NERDTreeGitStatusUseNerdFonts = 1
        let g:NERDTreeGitStatusIndicatorMapCustom = {
                        \ 'Modified'  :'✹',
                        \ 'Staged'    :'✚',
                        \ 'Untracked' :'✭',
                        \ 'Renamed'   :'➜',
                        \ 'Unmerged'  :'═',
                        \ 'Deleted'   :'✖',
                        \ 'Dirty'     :'✗',
                        \ 'Ignored'   :'☒',
                        \ 'Clean'     :'✔︎',
                        \ 'Unknown'   :'?',
                        \ }

    "括弧補全
    Plugin 'Raimondi/delimitMate'
        au FileType python let b:delimitMate_nesting_quotes = ['"']
    
    "ctrlp
    Plugin 'ctrlpvim/ctrlp.vim'
    Plugin 'mileszs/ack.vim'
        let g:ctrlp_map = '<c-p>'
        let g:ctrlp_cmd = 'CtrlP'
        let g:ctrlp_working_path_mode = 'ra'
        let g:ackprg = 'ag --nogroup --nocolor --column'
        if executable('ag')
            " Use Ag over Grep
            set grepprg=ag\ --nogroup\ --nocolor
            " Use ag in CtrlP for listing files.
            let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
            " Ag is fast enough that CtrlP doesn't need to cache
            let g:ctrlp_use_caching = 0
        endif
    
    "折疊    
    Plugin 'tmhedberg/SimpylFold'
        let g:SimpylFold_docstring_preview=1
    
    "py自動縮排
    "Plugin 'vim-scripts/indentpython.vim'
   
    "語法檢查/高亮
    Plugin 'scrooloose/syntastic'
        set statusline+=%#warningmsg#
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_check_on_open = 1
        let g:syntastic_check_on_wq = 0
        "let g:syntastic_python_checkers=['pylint']
        "let g:syntastic_python_checkers=['flake8',"pylint"]
        "let g:syntastic_python_pylint_post_args =
                "\ '--msg-template="{path}:{line}:{column}:{C}: [{symbol} {msg_id}] {msg}"'
    Plugin 'nvie/vim-flake8'
        let python_highlight_all=1
    
    "airline
    Plugin 'vim-airline/vim-airline'
        set laststatus=2
        " 使用powerline打過補丁的字型
        let g:airline_powerline_fonts = 1
        " 開啟tabline
        let g:airline#extensions#tabline#enabled = 1
        " tabline中當前buffer兩端的分隔字元
        let g:airline#extensions#tabline#left_sep = ' '
        " tabline中未啟用buffer兩端的分隔字元
        let g:airline#extensions#tabline#left_alt_sep = ' '
        " tabline中buffer顯示編號
        let g:airline#extensions#tabline#buffer_nr_show = 1
        " 對映切換buffer的鍵位
        nnoremap [b :bp<CR>
        nnoremap ]b :bn<CR>
        " 對映<leader>num到num buffer
        map <leader>1 :b 1<CR>
        map <leader>2 :b 2<CR>
        map <leader>3 :b 3<CR>
        map <leader>4 :b 4<CR>
        map <leader>5 :b 5<CR>
        map <leader>6 :b 6<CR>
        map <leader>7 :b 7<CR>
        map <leader>8 :b 8<CR>
        map <leader>9 :b 9<CR>

    " vim-scripts 中的外掛 "
    Plugin 'taglist.vim'
        "ctags 配置:F3快捷鍵顯示程式中的各種tags，包括變數和函式等。
        let Tlist_Ctags_Cmd = '/opt/homebrew/bin/ctags'
        map <F2> :TlistToggle<CR>
        "let Tlist_Auto_Open = 1
        let Tlist_Use_Right_Window=1
        "let Tlist_Show_One_File=1
        let Tlist_Exit_OnlyWindow=1
        let Tlist_WinWidth=25 

    "indentline
    Plugin 'Yggdroot/indentLine'
        let g:indentLine_concealcursor = 'inc'
        let g:indentLine_conceallevel = 2
        "let g:indentLine_char_list = ['|', '¦', '┆', '┊']
        "let g:indentLine_setColors = 0
        "let g:indentLine_color_term = 255 
        
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
    
set t_Co=256
"colorscheme torte
"set paste
highlight Normal ctermbg=235
filetype on 
syntax on
set scrolloff=3
set nocompatible
set number
set ruler
set noignorecase
set smartcase
set hlsearch
set incsearch
set cindent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab
set confirm
set backspace=2
set history=500
set showcmd
set showmode
set wrap
set encoding=utf-8
"折疊
set foldmethod=indent
"nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
"set foldcolumn=4
"set foldcolumn&

"新建.c,.h,.sh,.java檔案，自動插入檔案頭 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 
"定義函式SetTitle，自動插入檔案頭 
func SetTitle() 
    "如果檔案型別為.sh檔案 
    if &filetype == 'sh' 
            call setline(1, "##########################################################################") 
            call append(line("."), "# File Name: ".expand("%")) 
            call append(line(".")+1, "# Author: Wang") 
            call append(line(".")+2, "# mail: owen10270936@gmail.com") 
            call append(line(".")+3, "# Created Time: ".strftime("%c")) 
            call append(line(".")+4, "#########################################################################") 
    else 
            call setline(1, "/*************************************************************************") 
            call append(line("."),   "  > File Name: ".expand("%"))
            call append(line(".")+1, "  > Author: Wang")
            call append(line(".")+2, "  > Mail: owen10270936@gmail.com ") 
            call append(line(".")+3, "  > Created Time: ".strftime("%c"))                                
            call append(line(".")+4, " ************************************************************************/") 
            call append(line(".")+5, "")            
    endif
    
    if &filetype == 'cpp'        
        call append(line(".")+6, "//#include <iostream>")
        call append(line(".")+7, "//#include <cstdlib>")
        call append(line(".")+8, "//using namespace std;")        
        call append(line(".")+9, "")                                                    
    endif                                
    if &filetype == 'c'        
        call append(line(".")+6, "//#include <stdio.h>")                       
        call append(line(".")+7, "//#include <stdlib.h>")                       
        call append(line(".")+8, "//#include <string.h>")                       
        call append(line(".")+9, "")    
    endif                                
    if &filetype == 'java'
        call append(line(".")+6,"public class ".expand("%"))
        call append(line(".")+7,"")
    endif
    "新建檔案後，自動定位到檔案末尾    
    autocmd BufNewFile * normal G
endfunc 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""))
